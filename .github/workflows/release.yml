name: publish

on:
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        description: "burrito (Minor Release)"
        default: "burrito-next"
        options:
        - burrito-next (Preview build)
        - burrito (Minor Release)
        required: true

jobs:
  call-build:
   uses: ./.github/workflows/main.yml

  publish:
    needs: call-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download Burrito Package
        uses: actions/download-artifact@v4
        # This is failing for some reason
        #with:
        #  name: Burrito_Linux

      - name: Generate a random name
        id: version_number
        run: |
          UUID=$(uuidgen)
          echo "VERSION_NUMBER=${UUID}" >> "$GITHUB_ENV"
          echo "version_number=${UUID}" >> "$GITHUB_OUTPUT"

      - name: Zip up the download
        run: |
          zip -r downloaded-artifact/burrito-"$VERSION_NUMBER" Burrito_Linux

      # - name: Listfiles
      #   run: |
      #     tree .
      #     pwd

      # - name: Create a fake artifact
      #   run: |
      #     mkdir -p "downloaded-artifact"
      #     echo "Hello World" > downloaded-artifact/my_special_artifact.zip

      - name: Upload a new release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const tag = "${{ steps.version_number.outputs.version_number }}";

            const githubToken = process.env.GITHUB_TOKEN;

            console.log(`Creating release with tag: ${tag}`);
            console.log(`using ${context.repo.owner} and ${context.repo.repo}`);
            console.log(`Found the release mode ${github.context.payload.inputs.release_type}`);

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: tag,
              body: "Automated release",
              draft: true,
              prerelease: false,
            });

            const releaseId = release.data.id;

            // 2. Upload assets
            const dir = 'downloaded-artifact';
            const files = fs.readdirSync(dir);
            for (const file of files) {
              const filePath = path.join(dir, file);
              const content = fs.readFileSync(filePath);
              const stats = fs.statSync(filePath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: file,
                data: content,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': stats.size,
                }
              });
            }
  
