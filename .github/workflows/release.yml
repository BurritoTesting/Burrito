name: publish

on:
  workflow_dispatch:
    inputs:
      artifact-name:
        required: true
        type: string
      release-message:
        type: string
      checksum:
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github
      - name: Get the repository state
        uses: ./.github/actions/repo-state
        id: repo-state
      - name: Download all available artifacts
        uses: actions/download-artifact@v4
      - name: Handle manually entered release message if it exists
        if: inputs.release-message != ''
        run: |
          echo "${{ inputs.release-message }}" >> release-notes-tmp
          echo "" >> release-notes-tmp

      - name: Upload a new release
        uses: actions/github-script@7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const tag = '${{ github.event.inputs.tag }}'
            const githubToken = process.env.GITHUB_TOKEN;


            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: tag,
              body: "Automated release",
              draft: true,
              prerelease: false,
            });

            const releaseId = release.data.id;

            // 2. Upload assets
            const dir = 'downloaded-artifact';
            const files = fs.readdirSync(dir);
            for (const file of files) {
              const filePath = path.join(dir, file);
              const content = fs.readFileSync(filePath);
              const stats = fs.statSync(filePath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: file,
                data: content,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': stats.size,
                }
              });
            }
  
