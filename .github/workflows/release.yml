name: publish

on:
  workflow_dispatch:
    inputs:
      artifact-name:
        required: true
        type: string
      release-message:
        type: string
      checksum:
        type: string

jobs:
  call-build:
    uses: ./.github/workflows/main.yml

  publish:
    needs: call-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all available artifacts
        uses: actions/download-artifact@v4


      - name: Listfiles
        run: |
          tree .
          pwd

      #- name: Get the repository state
      #  uses: ./.github/workflows/main
      #  id: main-build


      - name: Create a fake artifact
        run: |
          mkdir -p "downloaded-artifact"
          echo "Hello World" > downloaded-artifact/my_special_artifact.zip

      - name: Upload a new release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            function generateTag() {
              const date = new Date().toISOString().slice(0, 10).replace(/-/g, '');
              const random = Math.random().toString(36).substring(2, 8);
              return `release-${date}-${random}`;
            }

            const tag = generateTag();

            const githubToken = process.env.GITHUB_TOKEN;

            console.log(`Creating release with tag: ${tag}`);
            console.log(`using ${context.repo.owner} and ${context.repo.repo}`);

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: tag,
              body: "Automated release",
              draft: true,
              prerelease: false,
            });

            const releaseId = release.data.id;

            // 2. Upload assets
            const dir = 'downloaded-artifact';
            const files = fs.readdirSync(dir);
            for (const file of files) {
              const filePath = path.join(dir, file);
              const content = fs.readFileSync(filePath);
              const stats = fs.statSync(filePath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: file,
                data: content,
                headers: {
                  'content-type': 'application/octet-stream',
                  'content-length': stats.size,
                }
              });
            }
  
